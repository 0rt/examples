library(tm)
library(SnowballC)
library(wordcloud)
library(dplyr)
library(RColorBrewer)
remove_stopwords <- function(x) {tm_map(x, removeWords, c('dont','also','ive','may',
'the','can','like','just','this','its',
'this',stopwords('english'))) }
the_donald = read.csv('/hddl/workspace/data/The_Donald_sample_comments.csv')
the_donald$absolute_position=NULL
object.size(the_donald)
object.size(the_donald)/1e6
object.size(the_donald$text)/1e6
corp_donald = Corpus(VectorSource(tolower(the_donald$text))) %>%
tm_map(PlainTextDocument) %>%
remove_stopwords()
object.size(corp_donald)
object.size(corp_donald)/1e6
wordcloud(corp_donald, max.words=150,colors=pal)
pal = colorRampPalette(c('#2244DD','#FF4411'))(9)
wordcloud(corp_donald, max.words=150,colors=pal)
rm(corp_donald)
rm(the_donald)
gc()
ls
ls()
reset
politics = read.csv('/hddl/workspace/data/politics_sample_comments.csv',stringsAsFactors=FALSE)
politics$absolute_position=NULL
corp_politics= Corpus(VectorSource(tolower(politics$text))) %>%
tm_map(PlainTextDocument) %>%
remove_stopwords()
wordcloud(politics, max.words=150,colors=pal)
library(tm)
library(SnowballC)
library(wordcloud)
library(dplyr)
library(RColorBrewer)
pal = colorRampPalette(c('#2244DD','#FF4411'))(9)
remove_stopwords <- function(x) {tm_map(x, removeWords, c('dont','also','ive','may',
'the','can','like','just','this','its',
'this',stopwords('english'))) }
#only have enough resources to do a sample
politics = read.csv('/hddl/workspace/data/politics_sample_comments.csv',stringsAsFactors=FALSE)
politics$absolute_position=NULL
corp_politics= Corpus(VectorSource(tolower(politics$text))) %>%
tm_map(PlainTextDocument) %>%
remove_stopwords()
wordcloud(politics, max.words=150,colors=pal)
wordcloud(corp_politics, max.words=150,colors=pal)
object.size(politics)
object.size(corp_politics)
?wordcloud
library(tm)
library(SnowballC)
library(wordcloud)
library(dplyr)
library(RColorBrewer)
pal = colorRampPalette(c('#2244DD','#FF4411'))(9)
remove_stopwords <- function(x) {tm_map(x, removeWords, c('dont','also','ive','may',
'the','can','like','just','this','its',
'this',stopwords('english'))) }
###libertarian
politics = read.csv('/hddl/workspace/data/libertarian_sample_comments.csv',stringsAsFactors=FALSE)
politics$absolute_position=NULL
corp_politics= Corpus(VectorSource(tolower(politics$text))) %>%
tm_map(PlainTextDocument) %>%
remove_stopwords()
wordcloud(corp_politics, max.words=150,colors=pal)
setwd('/hddl/workspace/mushrooms')
mushrooms = read.csv('mushrooms')
mushrooms = read.csv('mushrooms.csv')
head(mushrooms)
source('var_list.r')
source('vardict.r')
source('vardict.r')
var_dict
library(plyr)
mapvalues
col
remap_variable <- function(dfc, dict)
return(mapvalues(dfc, from=names(dict), to=unlist(dict)))
remap_variable <- function(dfc, dict)
return(mapvalues(dfc, from=names(dict), to=unlist(dict)))
for (name in names(var_dict)){
mushrooms[,name] = remap_variable(mushrooms[,name], var_dict[name])
}
remap_variable <- function(dfc, dict)
return(mapvalues(dfc, from=names(dict), to=unlist(dict)))
for (name in names(var_dict)){
mushrooms[,name] = remap_variable(mushrooms[,name], var_dict[[name]])
}
source('vardict.r')
mushrooms = read.csv('mushrooms.csv')
remap_variable <- function(dfc, dict)
return(mapvalues(dfc, from=names(dict), to=unlist(dict)))
for (name in names(var_dict)){
mushrooms[,name] = remap_variable(mushrooms[,name], var_dict[[name]])
}
head(mushrooms)
vardict[['class']] = list('p' = 'poisonous', 'e'='edible')
#dictionary made in emacs using replace-regexp and M+shift+5
source('vardict.r')
var_dict[['class']] = list('p' = 'poisonous', 'e'='edible')
mushrooms = read.csv('mushrooms.csv')
remap_variable <- function(dfc, dict)
return(mapvalues(dfc, from=names(dict), to=unlist(dict)))
for (name in names(var_dict)){
mushrooms[,name] = remap_variable(mushrooms[,name], var_dict[[name]])
}
head(mushrooms)
dim(mushrooms)
library(randomForest)
rf = randomForest(class ~ ., data=mushrooms)
summary(rf)
rf
linear_model = glm(class ~ ., data=mushrooms, family=binomial)
logistic_model = glm(class ~ ., data=mushrooms)
colwise(function(x) sum(unique(levels(x))))(mushrooms)
colwise(class)(mushrooms)
unique(c('a','b'))
colwise(function(x)length(levels(x)))(mushrooms)
var_dict[['veil_type']]
var_dict[['veil.type']]
mushrooms = read.csv('mushrooms.csv')
summary(mushrooms$veil.type)
remap_variable <- function(dfc, dict)
return(plyr::mapvalues(dfc, from=names(dict), to=unlist(dict)))
for (name in names(var_dict)){
mushrooms[,name] = remap_variable(mushrooms[,name], var_dict[[name]])
}
#check dimensionality of columns
colwise(function(x)length(levels(x)))(mushrooms)
mushrooms$veil.type = NULL
logistic_model = glm(class ~ ., data=mushrooms)
colwise(function(x) sum(is.nan(x)))(mushrooms)
logistic_model = glm(class ~ ., data=mushrooms, family='binomial')
summary(logistic_model)
step
step_logistic = step(logistic_model)
summary(step_logistic)
library(cart)
library(rcart)
install.packages('rcart')
library(rpart)
rpart
tree = rpart(class ~ ., data=mushrooms)
summary(tree)
plot(tree)
text(tree)
summary(mushrooms)
?rpart
instal.packages('rpart.plot')
install.packages('rpart.plot')
library(rpart.plot)
plot(tree)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1])
head(preds)
?rpart.predict
?predict.rpart
preds = predict(tree, mushrooms[,-1], type='class')
plot(preds)
table(mushrooms$class, preds)
?rpart.control
cntrl = rpart.control(minsplit=15)
preds = predict(tree, mushrooms[,-1], type='class', control=cntrl)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1], type='class')
table(mushrooms$class, preds)
cntrl = rpart.control(minsplit=12)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1], type='class')
cntrl = rpart.control(minsplit=12, cp=0.005)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1], type='class')
table(mushrooms$class, preds)
cntrl = rpart.control(minsplit=12, cp=0.004)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1], type='class')
table(mushrooms$class, preds)
cntrl = rpart.control(minsplit=12, cp=0.003)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1], type='class')
table(mushrooms$class, preds)
cntrl = rpart.control(minsplit=9, cp=0.003)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1], type='class')
table(mushrooms$class, preds)
cntrl = rpart.control(minsplit=6, cp=0.002)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1], type='class')
table(mushrooms$class, preds)
cntrl = rpart.control(minsplit=6, cp=0.001)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1], type='class')
table(mushrooms$class, preds)
cntrl = rpart.control(minsplit=2, cp=0.001)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1], type='class')
table(mushrooms$class, preds)
cntrl = rpart.control(minsplit=2, cp=0.0001)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1], type='class')
table(mushrooms$class, preds)
cntrl = rpart.control(minsplit=15, cp=0.005)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree)
preds = predict(tree, mushrooms[,-1], type='class')
table(mushrooms$class, preds)
?rpart.plot
rpart.plot(tree,type=4)
cntrl = rpart.control(minsplit=2, cp=0.001)
tree = rpart(class ~ ., data=mushrooms, control=cntrl)
rpart.plot(tree,type=4)
preds = predict(tree, mushrooms[,-1], type='class')
table(mushrooms$class, preds)
